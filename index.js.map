{"version":3,"file":"index.js","sources":["src/helpers/validateInitialValue.ts","src/hooks/useSortable/index.ts"],"sourcesContent":["/**\n * The validator function returns\n * - input array for array or object that can be change to a array\n * - [] for other\n *\n * @param {any} initialValue\n *              Value to be validated\n *\n * @return {Array}\n *         input array or [] for wrong input\n *\n * @example\n *        const validatedInitialValue = validateInitialValue(initialValue);\n */\nexport const validateInitialValue = (initialValue: any): Array<any> => {\n  if (typeof initialValue === 'object' && initialValue !== null && !Array.isArray(initialValue)) {\n    console.log(\n      'you have passed a object when a array is required. It still may work however. Please pass a array.',\n    );\n    initialValue = [...initialValue]\n  }\n  if (!Array.isArray(initialValue)) {\n    console.log(\n      'you really want to break the validation. Please pass a array as parameter. Defaulting to [].',\n    )\n    initialValue = []\n  }\n\n  return initialValue;\n};\n","import { useEffect, useMemo, useState } from \"react\"\nimport { validateInitialValue } from '../../helpers/validateInitialValue';\n\ntype IUseSortable = {\n  items: Array<any>;\n  requestSort: (key: string, direction: string) => void;\n  requestSearch: (search: string, value: string) => void;\n  requestBookMark: (id: string | number) => void;\n};\n\ntype Config = {\n  key: string;\n  direction: string;\n  bookMarks: Array<any>;\n  search: string;\n  value: string;\n};\n\n\n/**\n * Classic sort & search example to help understand the flow of this npm package\n *\n * @param    {Array} initialValue\n *           initial sort & search value\n * \n * @param    {Config} config\n *           initial config for sort & search in initialValue\n *\n * @return   {Array}\n *           array with sort & search and methods\n *\n * @property {Array} items\n *           The current array that sort & search\n *\n * @property {(key: string | number, direction: string) => void} requestSort\n *           the request for Sort function that get what Key you want to sort and direction \n *           direction can be \"ascending\" or \"descending\"\n *           defult value of direction is \"ascending\"\n *\n * @property {(search: string | number, value: string | number) => void} requestSearch\n *           the request for Search function that get Search for what Key you want search and value \n *\n * @property {(id: string | number) => void} requestBookMark\n *           the request for BookMark function that get what Id you want to book mark and set top of you array\n *\n * @example\n *   const ExampleComponent = () => {\n *     const myArray = [{\n *        id: 1,\n *        name: \"Saber\",\n *        family: \"Pourrahimi\"\n *        ...\n *     },\n *     {\n *        id: 2,\n *        name: \"Maryam\",\n *        family: \"Mirzayee\"\n *        ...\n *     }]\n *     const { items, requestSort, requestSearch, requestBookMark } = useSortable(myArray);\n *\n *     return (\n *       <>\n *         <table>\n *           <tr>\n *             <td>Id</td>\n *             <td>Name</td>\n *             <td>Family</td>\n *           </tr>\n *           {items.map(el => (\n *              <tr onClick={() => requestBookMark(el.id)}>\n *                <td>{el.id}</td>\n *                <td>{el.name}</td>\n *                <td>{el.family}</td>\n *              </tr>\n *           ))}\n *         </table>\n *         <button onClick={() => requestSort(\"name\", \"ascending\")}>Sort ascending myArray by name</button>\n *         <input onChange={(e) => requestSearch(\"name\", e.target.value)}>Search name in myArray</button>\n *         <input onChange={(e) => requestSearch(\"family\", e.target.value)}>Search family in myArray</button>\n *       </>\n *      )\n *    }\n */\nexport const useSortable = (items: Array<any>, config: Config = {\n  bookMarks: [],\n  key: \"\",\n  direction: \"\",\n  search: \"\",\n  value: \"\",\n}) : IUseSortable => {\n  const validatedInitialValue = validateInitialValue(items);\n\n  const [sortConfig, setSortConfig] = useState<Config>(config)\n  const bookMarkList = JSON.parse(window.localStorage.getItem(\"book-mark\") || \"[]\")\n  \n  const sortedItems = useMemo(() => {\n    let sortableItems = [...validatedInitialValue]\n    if (sortConfig !== null && sortConfig.key !== null) {\n      sortableItems\n      .sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === \"ascending\" ? -1 : 1\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === \"ascending\" ? 1 : -1\n        }\n        return 0\n      })\n    }\n    if (sortConfig !== null && sortConfig.search && sortConfig.value) {\n      sortableItems = sortableItems\n      .filter(item => {\n        return item[sortConfig.search].toLowerCase().includes(sortConfig.value.toLowerCase())\n      })\n      .sort((a, b) => {\n        if(a[sortConfig.search].toLowerCase().indexOf(sortConfig.value.toLowerCase()) > b[sortConfig.search].toLowerCase().indexOf(sortConfig.value.toLowerCase())) {\n          return 1\n        } else if (a[sortConfig.search].toLowerCase().indexOf(sortConfig.value.toLowerCase()) < b[sortConfig.search].toLowerCase().indexOf(sortConfig.value.toLowerCase())) {\n            return -1\n        } else {\n            if(a[sortConfig.search] > b[sortConfig.search])\n              return 1\n            else\n              return -1\n        }\n      })\n    }\n    if (sortConfig.bookMarks) {\n      sortConfig.bookMarks.forEach(bookMark => {\n        sortableItems.sort((x,y) => { return x.id === bookMark ? -1 : y.id === bookMark ? 1 : 0 })\n      })\n    }\n    return sortableItems\n  }, [items, sortConfig])\n  \n  const requestSort = (key: string, direction: string) => {\n    direction = direction || \"ascending\"\n    if (sortConfig && sortConfig.key === key && sortConfig.direction === \"ascending\") {\n      direction = \"descending\"\n    }\n    const params = new URLSearchParams(window.location.search)\n    params.set(\"sort\", key.toString())\n    params.set(\"d\", direction)\n    const URL = params.toString().indexOf(\"null\") > 0 ? `${window.location.pathname}` : `${window.location.pathname}?${params.toString()}`\n    window.history.replaceState({}, \"\", URL)\n    setSortConfig({...sortConfig, key: key.toString() && key.toString(), direction })\n  }\n\n  const requestSearch = (search: string, value: string) => {\n    setSortConfig({...sortConfig, search: search && search.toString(), value: value && value.toString() })\n  }\n\n  const requestBookMark = (id: string | number) => {\n    if([...sortConfig.bookMarks].includes(id)) {  \n      const removedItem = [...sortConfig.bookMarks.filter(el => el !== id)]\n      setSortConfig({...sortConfig, bookMarks: removedItem})\n      window.localStorage.setItem(\"book-mark\", JSON.stringify(removedItem))\n    } else {\n      const addItem = [...sortConfig.bookMarks, id]\n      setSortConfig({...sortConfig, bookMarks: addItem})\n      window.localStorage.setItem(\"book-mark\", JSON.stringify(addItem))\n    } \n  }\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search)\n    const URLsort = params.get('sort') || \"\"\n    const URLd = params.get('d') || \"\"\n    requestSort(URLsort, URLd)\n    setSortConfig({...sortConfig, key: URLsort, direction: URLd, bookMarks: bookMarkList})\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[])\n\n  return { items: sortedItems, requestSort, requestSearch, requestBookMark }\n}\n\nuseSortable.defaultProps = {\n  config: {\n    bookMarks: [],\n    key: \"\",\n    direction: \"\",\n    search: \"\",\n    value: \"\",\n  },\n};\n\nmodule.exports = useSortable;\n\nmodule.exports.default = useSortable;"],"names":["validateInitialValue","initialValue","Array","isArray","console","log","useSortable","items","config","bookMarks","key","direction","search","value","requestSort","sortConfig","params","URLSearchParams","window","location","set","toString","URL","indexOf","pathname","history","replaceState","setSortConfig","validatedInitialValue","_a","useState","bookMarkList","JSON","parse","localStorage","getItem","sortedItems","useMemo","sortableItems","sort","a","b","filter","item","toLowerCase","includes","forEach","bookMark","x","y","id","useEffect","URLsort","get","URLd","requestSearch","requestBookMark","removedItem","addItem","__spreadArrays","el","setItem","stringify","defaultProps","module","exports","default"],"mappings":"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"}